// Generated by IcedCoffeeScript 1.6.3-f
var iced, interval, __iced_k, __iced_k_noop,
  __slice = [].slice;

iced = {
  Deferrals: (function() {
    function _Class(_arg) {
      this.continuation = _arg;
      this.count = 1;
      this.ret = null;
    }

    _Class.prototype._fulfill = function() {
      if (!--this.count) {
        return this.continuation(this.ret);
      }
    };

    _Class.prototype.defer = function(defer_params) {
      var _this = this;
      ++this.count;
      return function() {
        var inner_params, _ref;
        inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (defer_params != null) {
          if ((_ref = defer_params.assign_fn) != null) {
            _ref.apply(null, inner_params);
          }
        }
        return _this._fulfill();
      };
    };

    return _Class;

  })(),
  findDeferral: function() {
    return null;
  },
  trampoline: function(_fn) {
    return _fn();
  }
};
__iced_k = __iced_k_noop = function() {};

interval = null;

chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {
  var info, matcher, mobileMatch, opMatch, post, postclass, quoteLink, ___iced_passed_deferral, __iced_deferrals, __iced_k,
    _this = this;
  __iced_k = __iced_k_noop;
  ___iced_passed_deferral = iced.findDeferral(arguments);
  if (request.action !== 'highlight_posts') {
    return;
  }
  if (interval != null) {
    clearInterval(interval);
  }
  matcher = new RegExp(request.matcher);
  mobileMatch = /mobile/;
  opMatch = /post op/;
  sendResponse({
    text: 'kay'
  });
  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      parent: ___iced_passed_deferral,
      filename: "4chan_inject.iced"
    });
    interval = setInterval(__iced_deferrals.defer({
      lineno: 13
    }), 1000);
    __iced_deferrals._fulfill();
  })(function() {
    var _i, _len, _ref, _results;
    _ref = $('a[title="Quote this post"]');
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      quoteLink = _ref[_i];
      info = quoteLink.parentElement.parentElement;
      if (mobileMatch.test(info.getAttribute('class'))) {
        continue;
      }
      post = info.parentElement;
      if (opMatch.test(post.getAttribute('class'))) {
        continue;
      }
      postclass = "post reply" + (matcher.test(quoteLink.innerHTML) ? ' highlight' : '');
      _results.push(post.setAttribute('class', postclass));
    }
    return _results;
  });
});
